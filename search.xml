<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[K8S搭建]]></title>
      <url>/2018/01/25/K8S%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h1 id="K8S搭建文档"><a href="#K8S搭建文档" class="headerlink" title="K8S搭建文档"></a>K8S搭建文档</h1><h2 id="硬件环境"><a href="#硬件环境" class="headerlink" title="硬件环境"></a>硬件环境</h2><p><strong><strong>三台centos7主机</strong></strong></p>
<p><strong><strong>两台做master(高可用)</strong></strong></p>
<p><strong><strong>1台做node</strong></strong></p>
<p><strong><strong>V1.6.3</strong></strong></p>
<h2 id="部署准备"><a href="#部署准备" class="headerlink" title="部署准备"></a>部署准备</h2><h3 id="Step-1-登录各个主机首先配置静态ip"><a href="#Step-1-登录各个主机首先配置静态ip" class="headerlink" title="Step 1   登录各个主机首先配置静态ip"></a>Step 1   登录各个主机首先配置静态ip</h3><h3 id="Step-2-关闭各个主机SELINUX-amp-amp-防火墙"><a href="#Step-2-关闭各个主机SELINUX-amp-amp-防火墙" class="headerlink" title="Step 2   关闭各个主机SELINUX&amp;&amp;防火墙"></a>Step 2   关闭各个主机SELINUX&amp;&amp;防火墙</h3><p> setenforce 0<br> systemctl stop firewalld.service<br> systemctl disable firewalld.service </p>
<h3 id="Step-3-设置各个主机hostname"><a href="#Step-3-设置各个主机hostname" class="headerlink" title="Step 3   设置各个主机hostname"></a>Step 3   设置各个主机hostname</h3><p> echo 192-168-232-133.master  /etc/hostname</p>
<p> echo “127.0.0.1 192-168-232-133.master”  /etc/hosts  </p>
<p> sysctl kernel.hostname=192-168-232-133.master</p>
<h3 id="Step-4-配置各个主机ip到dns的域名解析-需要配置所有集群中的主机"><a href="#Step-4-配置各个主机ip到dns的域名解析-需要配置所有集群中的主机" class="headerlink" title="Step 4   配置各个主机ip到dns的域名解析(需要配置所有集群中的主机)"></a>Step 4   配置各个主机ip到dns的域名解析(需要配置所有集群中的主机)</h3><p> vi /etc/hosts<br> 192.168.232.133 192-168-232-133.master</p>
<h3 id="Step-5-启动各个主机network"><a href="#Step-5-启动各个主机network" class="headerlink" title="Step 5   启动各个主机network"></a>Step 5   启动各个主机network</h3><p> service network restart</p>
<h3 id="Step-6-验证主机节点网络和域名解析和主机名"><a href="#Step-6-验证主机节点网络和域名解析和主机名" class="headerlink" title="Step 6   验证主机节点网络和域名解析和主机名"></a>Step 6   验证主机节点网络和域名解析和主机名</h3><h3 id="Step-7-安装工具"><a href="#Step-7-安装工具" class="headerlink" title="Step 7   安装工具"></a>Step 7   安装工具</h3><p>yum install vim lrzsz tmux -y</p>
<h3 id="Step-8-安装docker（1-12-6）"><a href="#Step-8-安装docker（1-12-6）" class="headerlink" title="Step 8   安装docker（1.12.6）"></a>Step 8   安装docker（1.12.6）</h3><p>yum install -y docker-engine-selinux-1.12.6-1.el7.centos.noarch.rpm<br>yum install -y docker-engine-1.12.6-1.el7.centos.x86_64.rpm </p>
<h3 id="Step-9-启动docker"><a href="#Step-9-启动docker" class="headerlink" title="Step 9  启动docker"></a>Step 9  启动docker</h3><p>systemctl start docker</p>
<h2 id="部署K8S"><a href="#部署K8S" class="headerlink" title="部署K8S"></a>部署K8S</h2><h3 id="Step-10-导入k8s1-6-3-amp-calico所需镜像"><a href="#Step-10-导入k8s1-6-3-amp-calico所需镜像" class="headerlink" title="Step 10  导入k8s1.6.3&amp;calico所需镜像"></a>Step 10  导入k8s1.6.3&amp;calico所需镜像</h3><p>docker load -i  k8s1.6.3/k8s-1.6.3-images/dnsmasq.tar<br>docker load -i  k8s1.6.3/k8s-1.6.3-images/dns-nanny.tar<br>docker load -i  k8s1.6.3/k8s-1.6.3-images/dns.tar<br>docker load -i  k8s1.6.3/k8s-1.6.3-images/kube-apiserver.tar<br>docker load -i  k8s1.6.3/k8s-1.6.3-images/kube-controller-manager.tar<br>docker load -i  k8s1.6.3/k8s-1.6.3-images/kube-proxy.tar<br>docker load -i  k8s1.6.3/k8s-1.6.3-images/kube-scheduler.tar<br>docker load -i  k8s1.6.3/k8s-1.6.3-images/pause.tar<br>docker load -i  k8s1.6.3/k8s-1.6.3-images/sidecar.tar<br>docker load -i  k8s1.6.3/calico/cni.tar<br>docker load -i  k8s1.6.3/calico/node.tar<br>docker load -i  k8s1.6.3/calico/policy.tar</p>
<h3 id="Step-11-安装kubeadm1-5-1-amp-kubelet-amp-kubectl（以上步骤每台都执行）"><a href="#Step-11-安装kubeadm1-5-1-amp-kubelet-amp-kubectl（以上步骤每台都执行）" class="headerlink" title="Step 11  安装kubeadm1.5.1&amp;kubelet&amp;kubectl（以上步骤每台都执行）"></a>Step 11  安装kubeadm1.5.1&amp;kubelet&amp;kubectl（以上步骤每台都执行）</h3><p>yum localinstall k8s1.6.3/centos/*.rpm -y  </p>
<h3 id="Step-12-安装etcd3-1-7-每台执行"><a href="#Step-12-安装etcd3-1-7-每台执行" class="headerlink" title="Step 12  安装etcd3.1.7(每台执行)"></a>Step 12  安装etcd3.1.7(每台执行)</h3><p>tar xvf etcd-v3.1.7-linux-amd64.tar<br>cd etcd-v3.1.7-linux-amd64<br>tmux<br><code>./etcd --name infra0 --initial-advertise-peer-urls http://192.168.10.127:2380 \
      --listen-peer-urls http://192.168.10.127:2380 \
      --listen-client-urls http://192.168.10.127:2379,http://127.0.0.1:2379 \
      --advertise-client-urls http://192.168.10.127:2379 \
      --initial-cluster-token etcd-cluster-1 \
      --initial-cluster infra0=http://192.168.10.127:2380,infra1=http://192.168.10.130:2380,infra2=http://192.168.10.129:2380 \
      --initial-cluster-state new</code></p>
<p> <code>./etcd --name infra1 --initial-advertise-peer-urls http://192.168.10.130:2380 \
      --listen-peer-urls http://192.168.10.130:2380 \
      --listen-client-urls http://192.168.10.130:2379,http://127.0.0.1:2379 \
      --advertise-client-urls http://192.168.10.130:2379 \
      --initial-cluster-token etcd-cluster-1 \
      --initial-cluster infra0=http://192.168.10.127:2380,infra1=http://192.168.10.130:2380,infra2=http://192.168.10.129:2380 \
      --initial-cluster-state new</code></p>
<p><code>./etcd --name infra2 --initial-advertise-peer-urls http://192.168.10.129:2380 \
      --listen-peer-urls http://192.168.10.129:2380 \
      --listen-client-urls http://192.168.10.129:2379,http://127.0.0.1:2379 \
      --advertise-client-urls http://192.168.10.129:2379 \
      --initial-cluster-token etcd-cluster-1 \
      --initial-cluster infra0=http://192.168.10.127:2380,infra1=http://192.168.10.130:2380,infra2=http://192.168.10.129:2380 \
      --initial-cluster-state new</code></p>
<h3 id="Step-13-修改kubelet配置文件（每台机器都修改）"><a href="#Step-13-修改kubelet配置文件（每台机器都修改）" class="headerlink" title="Step 13   修改kubelet配置文件（每台机器都修改）"></a>Step 13   修改kubelet配置文件（每台机器都修改）</h3><p>vi /etc/systemd/system/kubelet.service.d/10-kubeadm.conf<br>把<code>KUBELET_CGROUP_ARGS=—cgroup-driver=systemd</code>改成<code>KUBELET_CGROUP_ARGS=—cgroup-driver=cgroupfs</code>  </p>
<h3 id="Step-14-重启kubelet-amp-amp-并加为系统自启动"><a href="#Step-14-重启kubelet-amp-amp-并加为系统自启动" class="headerlink" title="Step 14    重启kubelet&amp;&amp;并加为系统自启动"></a>Step 14    重启kubelet&amp;&amp;并加为系统自启动</h3><p>[root@hor1 k8s1.6.3]# service kubelet restart<br>[root@hor1 k8s1.6.3]# systemctl daemon-reload<br>[root@hor1 k8s1.6.3]# systemctl enable kubelet<br>[root@hor1 k8s1.6.3]# systemctl enable docker  </p>
<h3 id="Step-15-修改Bridge-重启后失效-每台机器执行-，可加入到-etc-rc-d-rc-local"><a href="#Step-15-修改Bridge-重启后失效-每台机器执行-，可加入到-etc-rc-d-rc-local" class="headerlink" title="Step 15  修改Bridge(重启后失效,每台机器执行)，可加入到/etc/rc.d/rc.local"></a>Step 15  修改Bridge(重启后失效,每台机器执行)，可加入到/etc/rc.d/rc.local</h3><p>echo 1  /proc/sys/net/bridge/bridge-nf-call-iptables<br>echo 1  /proc/sys/net/bridge/bridge-nf-call-ip6tables</p>
<h3 id="Step-16-初始化主节点"><a href="#Step-16-初始化主节点" class="headerlink" title="Step 16  初始化主节点"></a>Step 16  初始化主节点</h3><p>[root@hor1 k8s1.6.3]# kubeadm init –config kubeadm.config<br>[kubeadm] WARNING: kubeadm is in beta, please do not use it for production clusters.<br>[init] Using Kubernetes version: v1.6.3<br>[init] Using Authorization mode: RBAC<br>[preflight] Running pre-flight checks<br>[preflight] Starting the kubelet service<br>[certificates] Generated CA certificate and key.<br>[certificates] Generated API server certificate and key.<br>[certificates] API Server serving cert is signed for DNS names [192-168-10-127.master   kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.10.127]<br>[certificates] Generated API server kubelet client certificate and key.<br>[certificates] Generated service account token signing key and public key.<br>[certificates] Generated front-proxy CA certificate and key.<br>[certificates] Generated front-proxy client certificate and key.<br>[certificates] Valid certificates and keys now exist in “/etc/kubernetes/pki”<br>[kubeconfig] Wrote KubeConfig file to disk: “/etc/kubernetes/admin.conf”<br>[kubeconfig] Wrote KubeConfig file to disk: “/etc/kubernetes/kubelet.conf”<br>[kubeconfig] Wrote KubeConfig file to disk: “/etc/kubernetes/controller-manager.conf”<br>[kubeconfig] Wrote KubeConfig file to disk: “/etc/kubernetes/scheduler.conf”<br>[apiclient] Created API client, waiting for the control plane to become ready<br>[apiclient] All control plane components are healthy after 17.544851 seconds<br>[apiclient] Waiting for at least one node to register<br>[apiclient] First node has registered after 4.004183 seconds<br>[token] Using token: 3f877e.e592d381fbbbe358<br>[apiconfig] Created RBAC rules<br>[addons] Created essential addon: kube-proxy<br>[addons] Created essential addon: kube-dns  </p>
<p>Your Kubernetes master has initialized successfully!  </p>
<p>To start using your cluster, you need to run (as a regular user):  </p>
<p>  sudo cp /etc/kubernetes/admin.conf $HOME/<br>  sudo chown $(id -u):$(id -g) $HOME/admin.conf<br>  export KUBECONFIG=$HOME/admin.conf  </p>
<p>You should now deploy a pod network to the cluster.<br>Run “kubectl apply -f [podnetwork].yaml” with one of the options listed at:<br>  <a href="http://kubernetes.io/docs/admin/addons/" target="_blank" rel="noopener">http://kubernetes.io/docs/admin/addons/</a>  </p>
<p>You can now join any number of machines by running the following on each node<br>as root:  </p>
<p>  kubeadm join –token 3f877e.e592d381fbbbe358 192.168.10.127:8080  </p>
<h3 id="Step-17-主机点可用"><a href="#Step-17-主机点可用" class="headerlink" title="Step 17   主机点可用"></a>Step 17   主机点可用</h3><p>sudo cp /etc/kubernetes/admin.conf $HOME/<br> sudo chown $(id -u):$(id -g) $HOME/admin.conf<br> export KUBECONFIG=$HOME/admin.conf   </p>
<h3 id="Step-18-加入Calico网络"><a href="#Step-18-加入Calico网络" class="headerlink" title="Step 18    加入Calico网络"></a>Step 18    加入Calico网络</h3><p>kubectl apply -f beijing-calico.yml    </p>
<h3 id="Step-19-查看各组件各pod的状态"><a href="#Step-19-查看各组件各pod的状态" class="headerlink" title="Step 19   查看各组件各pod的状态"></a>Step 19   查看各组件各pod的状态</h3><p>kubectl get pods –all-namespaces  </p>
<h3 id="Step-20-加入子节点"><a href="#Step-20-加入子节点" class="headerlink" title="Step 20 加入子节点"></a>Step 20 加入子节点</h3><p>   kubeadm join –token 3f877e.e592d381fbbbe358 192.168.10.127:8080    </p>
<h3 id="Step-21-验证dns无误"><a href="#Step-21-验证dns无误" class="headerlink" title="Step 21    验证dns无误"></a>Step 21    验证dns无误</h3><p>kubectl create -f busybox.yml<br>kubectl exec -it busybox – nslookup kubernetes.default</p>
<p>主节点搭建完成，一个主节点，两个子节点</p>
<h2 id="6-12-2017-4-57-18-PM"><a href="#6-12-2017-4-57-18-PM" class="headerlink" title="6/12/2017 4:57:18 PM "></a>6/12/2017 4:57:18 PM </h2><h2 id="高可用节点搭建（1-6未实践，参考1-5）"><a href="#高可用节点搭建（1-6未实践，参考1-5）" class="headerlink" title="高可用节点搭建（1.6未实践，参考1.5）"></a>高可用节点搭建（1.6未实践，参考1.5）</h2>]]></content>
      
        <categories>
            
            <category> 容器 </category>
            
            <category> kubernates </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
            <tag> kubernates </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2018计划]]></title>
      <url>/2018/01/24/2018%E8%AE%A1%E5%88%92/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> 其他 </category>
            
            <category> 学习计划 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> python </tag>
            
            <tag> Learning </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[读书]]></title>
      <url>/reading/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于]]></title>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<p>大家好，我是艾伦吴。欢迎来到我的个人技术博客。</p>
<p>现就职于沈阳本地的一家航空领域的企业，作为一名运维工程师，始终把DevOps作为努力的目标，希望以后可以慢慢的把开发做的更好，本人喜欢研究各种新奇的东西，流连于各大开源网站，革命尚未成功，同志任需努力。</p>
]]></content>
    </entry>
    
  
</search>
