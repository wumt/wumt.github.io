<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[进击的Linux-du]]></title>
      <url>/2018/07/05/%E8%BF%9B%E5%87%BB%E7%9A%84Linux--du/</url>
      <content type="html"><![CDATA[<p>#进击的Linux–du<br><strong>查找文件夹下最大的目录,显示前十个</strong><br><a id="more"></a><br>    du -a /home | sort -n -r | head -n 10</p>
<p><strong>查询当前目录大小</strong></p>
<pre><code>du -sh *
</code></pre>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 命令学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> shell </tag>
            
            <tag> Linux </tag>
            
            <tag> command </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker和DaoCloud纯小白入门手册]]></title>
      <url>/2018/07/05/Docker%E5%92%8CDaoCloud%E7%BA%AF%E5%B0%8F%E7%99%BD%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/</url>
      <content type="html"><![CDATA[<h1 id="Docker和DaoCloud纯小白入门手册"><a href="#Docker和DaoCloud纯小白入门手册" class="headerlink" title="Docker和DaoCloud纯小白入门手册"></a><a href="http://www.docker.com" target="_blank" rel="noopener">Docker</a>和<a href="https://account.daocloud.io/signup?invite_code=nsvv3jvpfve4ejlapnze" target="_blank" rel="noopener">DaoCloud</a>纯小白入门手册</h1><blockquote>
<p>一天，乔布斯走进了拉里.凯尼恩(Larry Kenyan)的办公隔间，他是负责麦金塔电脑操作系统的工程师，乔布斯抱怨说开机启动时间太长了。凯尼恩开始解释，但乔布斯打断了他。他问道：“如果能救人一命的话，你愿意想办法让启动时间缩短10秒钟吗？”凯尼恩说也许可以。乔布斯于是走到一块白板前开始演示，如果有500万人使用Mac，而每天开机都要多用10秒钟，那加起来每年就要浪费大约3亿分钟，而3亿分钟相当于至少100个人的终身寿命。“这番话让拉里十分震惊，几周过后，乔布斯再来看的时候，启动时间缩短了28秒，”阿特金森回忆说，“史蒂夫能看到宏观层面，从而激励别人工作。” </p>
<p>引述自：《史蒂夫·乔布斯传》p.111<br><a id="more"></a><br>乔布斯对时间的理解，促使我也有了写这篇文章的动力。因为：<a href="http://www.docker.com" target="_blank" rel="noopener">Docker</a>和<a href="https://account.daocloud.io/signup?invite_code=nsvv3jvpfve4ejlapnze" target="_blank" rel="noopener">DaoCloud</a>是划时代的伟大工具。web程序开发者、测试员、系统管理员们利用它们能够节约巨量的时间，加快产品上线进而也能节省用户（你、我、每个人）的时间。然而，居然没有一篇为纯粹只懂得个人电脑的小白所写的入门手册以至于这么优秀的工具无法迅速普及从而拯救N个人的生命，这简直太令人发指！</p>
</blockquote>
<p>工具的产生是为了解决问题，那么先来看看世界上存在着什么样的问题需要Docker和DaoCloud来解决。</p>
<h2 id="原始时代"><a href="#原始时代" class="headerlink" title="原始时代"></a>原始时代</h2><p><img src="img/ghost.png" alt="Ghost"></p>
<p>回忆一下Windows 98年代使用广泛的Norton Ghost软件（现在属于Symantec公司）。Ghost软件的作用是对可运行的系统环境做clone（克隆），形成一个镜像（image），以便Windows 98崩溃以后能够从镜像中迅速恢复一个可用的系统环境。这解决了频繁重装Windows 98的麻烦，而且从镜像恢复比安装更节约时间。它有几种常见用法：</p>
<ul>
<li>操作系统（例如Windows 98）安装好以后，对C盘（系统盘）做一个clone；</li>
<li>装完操作系统后再装些软件（例如输入法），然后对系统盘做clone（假设输入法也装在系统盘里）；</li>
<li>或者装完操作系统，再装完软件（比如photoshop），然后对photoshop做一些自己习惯的配置，最后再clone。</li>
</ul>
<p>显然，将更多的手工工作clone到image里，更能够节约多次安装的时间和人工劳动。</p>
<p>Docker对这个模式进行了Linux和网络世界的完美实现，但是以一种更网络化的方式实现，更加节省时间和更加灵活。接着来看没有Docker以前在Linux和网络世界会遇到什么情况：</p>
<p>我们都知道网络上运行着很多服务器，有web服务器，有DNS服务器等等。如果我们需要自己建一个服务器，要经过许多步骤，就拿最常见的web服务器来做个说明：</p>
<ol>
<li>先要有服务器。服务器外形与我们家用的电脑（台式机和笔记本）不一样，但是里面的硬件是一样的——CPU、内存、主板、硬盘。只不过作为服务千万人的服务器，这些硬件性能比家用电脑好很多。或者，也可以用虚拟机，甚至是从云服务商那里买VPS（Virutual Private Server，云服务商提供的存在于网上的虚拟机）。</li>
<li>安装操作系统（Linux或Windows Server版）；</li>
<li>安装web服务器软件（Apache、Nginx等）；</li>
<li>安装动态Web所需要的语言环境（PHP，Ruby，Python等）和数据库（MySQL等）；</li>
<li>有时为了快速开发还需要安装一些框架（比如Python的django等）；</li>
<li>部署代码到web服务器软件指定目录下，有时我们需要代码的版本控制系统（Subversion、Git等），这个系统可以直接安装在服务器上（通常情况，对外提供服务的正式服务器——谓之“生产环境”是不能够装版本控制系统的，但是用来做开发用途的服务器——谓之“开发环境”可以这么干）；</li>
<li>安装配置后，还需要配置公网IP地址，买好域名并将www.域名.com指向这个IP。</li>
</ol>
<p>累吗？很累！但是还没完！</p>
<p>系统管理员都知道，相同软件环境的服务器有时候要部署很多台，比如为了负载均衡，要部署一堆同样的web服务器，用户点网页的时候可以由不同服务器提供服务，以便响应海量用户。</p>
<p>开发者都知道，他们需要有很多台不同配置的服务器，原因在于，如果只有一个开发环境，一个项目使用python 2.7，另一个使用python 3.0，那需要进行一番设置。最头疼的是，这些软件环境升级还好说，如果需要降级就很麻烦，各种依赖库版本各种打架。因此，通常开发者都要求为不同的项目配备符合本项目软件环境要求的开发服务器，这就带来了大量不同软件环境服务器安装的需求。</p>
<p>有的时候，性能也出来捣乱，比如自己写的程序在配备了酷睿1代CPU的开发环境上运行的很吃力，想换到配备了酷睿5代CPU的机器，但是酷睿5代机器却没有同样的操作系统和软件环境，怎么办？只能在它上面按照旧机器的软件环境要求一模一样地安装一遍。这些问题弄的人头大以至于无法专心写代码，就连系统管理人员和测试人员也被折磨得疲惫不堪。</p>
<p>所以，三大痛点：</p>
<ol>
<li><strong>相同软件环境的多个服务器的安装</strong></li>
<li><strong>不同软件环境服务器的安装</strong></li>
<li><strong>不同硬件环境的相同软件环境的安装</strong></li>
</ol>
<p>Ghost方式解决的是第1和3类型的问题，而第3类型并没解决好（硬件驱动不同）。况且Linux体系的特性与Windows不同，因此没有类似Norton Ghost这样的软件，对于这三大痛点解决方案是：由于Linux系统有着可以网络安装的特性，操作系统和软件都放在服务器上，在安装不同软件环境的时候，使用相应的脚本来进行网络化自动安装，减少一些手工操作。以上这些，还没有涉及代码部署和把服务器连到网络上（上线）的自动化问题，这些步骤很多仍需要人工操作。</p>
<p>虚拟技术出现以后，使用虚拟机能够更方便一点解决第3个痛点。在硬件服务器操作系统中安装虚拟化软件（例如VMware）生成虚拟机母平台，在虚拟机母平台上产生多个虚拟机（没装操作系统的），再在这些虚拟机中安装操作系统和软件环境。如果遇到上述那个经典问题——机器性能不够，需要把开发环境迁移到性能更好的机器上去，那么只需要将虚拟机迁移到更好硬件平台的虚拟机母平台上去并给虚拟机分配更多的资源。</p>
<p>这个时代被我定义为“原始时代”，因为里面有大量的步骤是手工操作，类似于流水线生产还没有出现的原始手工时代。</p>
<h2 id="解决原始时代的问题"><a href="#解决原始时代的问题" class="headerlink" title="解决原始时代的问题"></a>解决原始时代的问题</h2><p>终于，一群聪明人实在受不了天天把时间耗费在无穷无尽的安装配置中。他们发明了<strong>Docker</strong>来解决这些问题。<a href="http://www.docker.com" target="_blank" rel="noopener">Docker</a>用<strong>docker image</strong>（中文叫做<strong>Docker镜像</strong>）来代替原始时代的镜像（或光盘），用<strong>docker file</strong>来取代自动安装脚本，用<strong>docker node</strong>来代替虚拟机母平台，用<strong>container（容器）</strong>来代替虚拟机。综合了原始时代那些工具的所有的优点使得Linux和网络实现了完全自动化。</p>
<ul>
<li>镜像（或光盘）==&gt; Docker image</li>
<li>安装脚本 ==&gt; Docker file</li>
<li>安装了虚拟机软件的服务器 ==&gt; Docker node</li>
<li>虚拟机（未安装操作系统的）==&gt; Docker container</li>
</ul>
<h3 id="Docker-image与Docker-file"><a href="#Docker-image与Docker-file" class="headerlink" title="Docker image与Docker file"></a>Docker image与Docker file</h3><p><strong>docker image</strong>存储在<a href="http://www.docker.com" target="_blank" rel="noopener">Docker</a>专门配置的网络仓库<a href="https://hub.docker.com" target="_blank" rel="noopener">Docker Hub</a>或<a href="https://account.daocloud.io/signup?invite_code=nsvv3jvpfve4ejlapnze" target="_blank" rel="noopener">DaoCloud</a>这样的Docker云服务商的网络仓库中(任何人都可以建立这样的网络仓库，通过web服务发布这些镜像)。</p>
<p><strong>docker file</strong>可以引用已经存在于网络仓库里的docker镜像，在其基础上继续定制的新docker镜像。所谓引用就是在docker file的开头写一句基于哪个镜像（语法是：<code>FROM 镜像库/镜像名</code>）。想让多少工序自动化，就将多少工序的相应命令写在docker file里。若将安装配置操作系统、软件的全部过程甚至代码部署都写在docker file中，那么，只需要更新代码，就实现了web应用的自动上线，从而节省大量的时间以及人工重复性工作。</p>
<p>执行docker file生成新docker image的操作，叫做<strong>“构建”</strong>。整个构建过程可以想象成模拟clone：将源docker image运行起来，按照docker file里的命令安装一些软件或者做一些配置，这一切做完以后，将整个环境制作成一个新docker image。</p>
<p>实际上源image并不运行，只是在docker file里写一些对其的操作，这些操作语句将被包含在新docker镜像里<strong>（新docker镜像=源docker镜像+docker file）</strong>，新docker镜像<em>运行</em>的时候才会执行docker file中的命令。</p>
<p>若一个更新的docker file引用了这个”新docker镜像”，构建的实质是将更新的docker file里的操作命令与”新docker镜像”中包含的docker file命令合并，并添加到那个更新的docker镜像里。所以，构建的本质是脚本安装，却表现为clone。</p>
<p>Docker术语体系中，每执行一条docker file里的命令，叫做增加一个<strong>“层”</strong>，无论这个“层”干的活是安装还是删除。由于镜像具有不可直接修改的性质，如果想从源docker镜像里删除某些软件后形成新的docker镜像，那么就在docker file里写入删除那些软件的语句，新构建生成的docker 镜像<em>运行起来</em>就没有那些软件了。由前述构建的实质可知：新docker 镜像本身不比源docker镜像小。</p>
<p>引用带来的好处是减少制作新docker镜像所需要写在docker file里的命令。举个例子：源镜像是Linux操作系统，那么可以引用它并制作出一个含有Linux+Apache+PHP的docker镜像，现在就有了两个可以充当源镜像的docker镜像。如果要制作标准的LAMP（Linux+Apache+MySQL+PHP）web服务器的docker镜像，只需要引用Linux+Apache+PHP这个源镜像，再在docker file里添加一句：下载并安装MySQL（语法请参考docker file相关文档，这里不多介绍），就成了。</p>
<p><img src="img/build.png" alt="构建"></p>
<h3 id="Docker-node与Docker-container"><a href="#Docker-node与Docker-container" class="headerlink" title="Docker node与Docker container"></a>Docker node与Docker container</h3><p>docker image运行在<strong>container（容器）</strong>中。将docker image调入容器运行的动作叫做<strong>“部署”</strong>。将指定的docker image部署到指定的容器，并完成启动，就产生了一个<strong>“服务”</strong>。</p>
<p>容器由<strong>Docker node</strong>提供。Docker体系中，<strong>docker软件</strong>（也就是很多文章里提到的下载、安装、配置的docker server）是虚拟化软件（回想一下VMware软件），docker node就是一个安装了docker软件的硬件机器（或者不用硬件机器，而是用虚拟机或VPS），从而成为了Docker虚拟机母平台，docker虚拟机就是容器（回想一下没有安装操作系统的VMware虚拟机）。通过操作docker软件，可以在docker node上创建多个容器。</p>
<p><img src="img/container.png" alt="容器"></p>
<p>Docker能够模拟“clone”的关键原因在于：容器与原始时代虚拟机实质上不同，它并不被母平台硬件不同所干扰，在docker镜像看来每个容器硬件环境都一样，也就不需要运行docker镜像后再手工去安装不同的驱动。表现与VMware虚拟机类似，但采用的是“沙盒”技术。</p>
<h3 id="DaoCloud的舞台"><a href="#DaoCloud的舞台" class="headerlink" title="DaoCloud的舞台"></a>DaoCloud的舞台</h3><p>而<a href="https://hub.docker.com" target="_blank" rel="noopener">Docker Hub</a>和<a href="https://account.daocloud.io/signup?invite_code=nsvv3jvpfve4ejlapnze" target="_blank" rel="noopener">DaoCloud</a>这样的云Docker服务商，为这条流水线完成了最后一环——使所有的步骤都在网络上进行，将上线也自动化并节省了从安装操作系统到服务器上线各个环节的时间，从而大大缩短了整体上线时间。</p>
<ul>
<li>它们存储了足够多种类的源docker镜像，使定制image需要的安装步骤尽可能少，甚至一些源镜像可以直接上线；</li>
<li>用足够强大的服务器来构建docker image；</li>
<li>提供docker node和容器，IP地址，域名以及相关的防火墙等网络基础上线平台；</li>
<li>还有从<a href="http://www.github.com" target="_blank" rel="noopener">GitHub</a>和其他代码仓库下载我们编写的docker file以及代码的能力。</li>
</ul>
<p>这相当于：docker镜像仓库、构建docker镜像的服务器，docker node以及其上的容器，均可以布置在一个云服务商内部的局域网中。从而节省了下载源docker镜像的时间、使用我们自己不够快的电脑制作docker镜像的时间、配置IP和域名的时间、还节省了安装配置相关防火墙以及负载均衡等网络设施的时间（开发者更无须了解这些配置的细节）。只要将符合我们需求的docker file以及程序源代码上传到已关联的GitHub repository，在DaoCloud网站中构建新镜像并指定该Docker file，然后部署、生成服务，即可实现服务器上线。</p>
<p><a href="https://account.daocloud.io/signup?invite_code=nsvv3jvpfve4ejlapnze" target="_blank" rel="noopener">DaoCloud</a>不仅提供了以上所说的那些功能，还可以管理不属于DaoCloud的docker node，无论这个docker node在哪里（可以在家里的树莓派上、台式电脑或笔记本里，也可以在AWS上）。从而为分布式部署我们的web应用服务器提供了方便。</p>
<h2 id="与DaoCloud共舞"><a href="#与DaoCloud共舞" class="headerlink" title="与DaoCloud共舞"></a>与DaoCloud共舞</h2><p>至此，Docker和DaoCloud是什么以及能做什么，都已经介绍完毕。那么我们怎么利用这套系统呢？先去<a href="https://account.daocloud.io/signup?invite_code=nsvv3jvpfve4ejlapnze" target="_blank" rel="noopener">DaoCloud</a>注册一个帐户，个人设置中关联自己的GitHub帐号。在<a href="http://www.github.com" target="_blank" rel="noopener">GitHub</a>里新建一个repository，存入Docker file文件。也可以在<a href="http://www.github.com" target="_blank" rel="noopener">GitHub</a>上找找别人的docker file，fork到自己<a href="http://www.github.com" target="_blank" rel="noopener">GitHub</a>帐户下的Repository里。跟着<a href="https://account.daocloud.io/signup?invite_code=nsvv3jvpfve4ejlapnze" target="_blank" rel="noopener">DaoCloud</a>的<a href="http://help.daocloud.io/" target="_blank" rel="noopener">入门手册</a>和<a href="http://7u2psl.com2.z0.glb.qiniucdn.com/daocloud_small.mp4" target="_blank" rel="noopener">视频</a>，在DaoCloud控制面板里点击“构建”（选择自己GitHub里有dockerfile的那个repository）、“部署”、点完这几个按钮后，便能获取一个运行着的服务器。</p>
<p>可能有些人还想在开发环境运行起来以后登录进去，以便再做一些手工工作或者上传代码，那么找找编写docker file的参考资料，里面会有介绍。其实呢，完全可以把自己的代码也放在GitHub用来存储docker file的同一个repository里，然后docker file里写一句<code>COPY ./ /tmp</code>，在docker镜像部署到容器运行以后，这些代码在/tmp目录里。要是想把一个index.html放在/www/html/中呢？Docker file里写成：<code>COPY ./ /www/html</code>就可以了。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>Docker技术目前还不能运用于Windows体系，只运用于Linux/Unix体系。</li>
<li>在DaoCloud部署的服务器必须是Web服务器。</li>
</ul>
<h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>本文写到这里，就算完成入门的任务了，小白们如果还有不明白的地方，欢迎来邮件询问，这篇文章将根据需要进行更新，力图最最白的那位小白也能看懂，从此开始学习docker技术相关知识，妥善利用<a href="https://account.daocloud.io/signup?invite_code=nsvv3jvpfve4ejlapnze" target="_blank" rel="noopener">DaoCloud</a>网站，节省开发部署所用的时间。因为：时间就是生命。</p>
<p>作者：Adrian Zhang，adrian@favap.com<br>2015-08-24 V2.0</p>
]]></content>
      
        <categories>
            
            <category> 容器,kubernates </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> coding </tag>
            
            <tag> 博客 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Percona配置文件]]></title>
      <url>/2018/03/07/Percona%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">datadir=/data/mysql</span><br><span class="line">#datadir=/var/lib/mysql</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line">user=mysql</span><br><span class="line"># Disabling symbolic-links is recommended to prevent assorted security risks</span><br><span class="line">symbolic-links=0</span><br><span class="line"></span><br><span class="line">tmpdir = /tmp</span><br><span class="line">skip-external-locking</span><br><span class="line">skip-name-resolve</span><br><span class="line">#network </span><br><span class="line">bind-address=0.0.0.0</span><br><span class="line">connect_timeout =60 </span><br><span class="line">wait_timeout =600 </span><br><span class="line">interactive_timeout = 600</span><br><span class="line">event_scheduler = ON</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### Percona Cluster #######</span><br><span class="line"># Path to Galera library</span><br><span class="line">wsrep_provider=/usr/lib64/libgalera_smm.so</span><br><span class="line"># Cluster connection URL contains the IPs of node#1, node#2 and node#3</span><br><span class="line">#wsrep_cluster_address=gcomm://10.2.13.80,10.2.13.8</span><br><span class="line">wsrep_cluster_address=gcomm://</span><br><span class="line"># In order for Galera to work correctly binlog format should be ROW</span><br><span class="line">binlog_format=ROW</span><br><span class="line"># MyISAM storage engine has only experimental support</span><br><span class="line">default_storage_engine=InnoDB</span><br><span class="line"># This changes how InnoDB autoincrement locks are managed and is a requirement for Galera</span><br><span class="line">innodb_autoinc_lock_mode=2</span><br><span class="line"># Node #1 address</span><br><span class="line">wsrep_node_address=10.2.13.80</span><br><span class="line"># SST method</span><br><span class="line">wsrep_sst_method=xtrabackup-v2</span><br><span class="line"># Cluster name</span><br><span class="line">wsrep_cluster_name=my_centos_cluster</span><br><span class="line"># Authentication for SST method</span><br><span class="line">wsrep_sst_auth=&quot;sstuser:s3cret&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">####bin log##########</span><br><span class="line">#log-bin = /var/log/mysql-bin </span><br><span class="line">#binlog_format = row</span><br><span class="line">#max_binlog_size = 128M</span><br><span class="line">#binlog_cache_size = 2M</span><br><span class="line">#expire-logs-days = 5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">####slow log #######</span><br><span class="line">slow_query_log = 1</span><br><span class="line">slow_query_log_file = /var/log/mysql.slow</span><br><span class="line">long_query_time = 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#####per_thread_buffers#########</span><br><span class="line"></span><br><span class="line">max_connections =1024</span><br><span class="line">max_user_connections = 1000</span><br><span class="line">max_connect_errors=10000</span><br><span class="line">max_allowed_packet =128M</span><br><span class="line"></span><br><span class="line">#table_cache = 3096</span><br><span class="line">table_open_cache = 6144</span><br><span class="line">table_definition_cache = 4096</span><br><span class="line">sort_buffer_size = 64M</span><br><span class="line">read_buffer_size = 512k</span><br><span class="line">read_rnd_buffer_size = 512k</span><br><span class="line">#join_buff_size = 512k</span><br><span class="line">tmp_table_size = 64M</span><br><span class="line">#max_help_tables_size = 64M</span><br><span class="line">query_cache_type = 1</span><br><span class="line">query_cache_size = 64M</span><br><span class="line">bulk_insert_buffer_size = 32M</span><br><span class="line">#thread_concurrency = 32</span><br><span class="line">thread_stack = 256k</span><br><span class="line">thread_cache_size=64</span><br><span class="line"> </span><br><span class="line">net_buffer_length=2k</span><br><span class="line">#max_connect_errors =1000 </span><br><span class="line">#limits </span><br><span class="line">#tmp_table_size =512M </span><br><span class="line">#max_heap_table_size =256M </span><br><span class="line">#table_cache =512 </span><br><span class="line">#logs </span><br><span class="line">#slow_query_log_file =/var/log/slowquery.log </span><br><span class="line"> </span><br><span class="line">log_error =/var/log/mysql-error.log </span><br><span class="line">long_query_time =10 </span><br><span class="line">#slow_query_log =1 </span><br><span class="line">#innodb </span><br><span class="line"> </span><br><span class="line">#innodb_data_file_path =ibdata1:128M;ibdata2:128M:autoextend:max:4096M </span><br><span class="line">innodb_file_per_table =1 </span><br><span class="line">innodb_status_file =1 </span><br><span class="line"> </span><br><span class="line">#innodb_additional_mem_pool_size =128M </span><br><span class="line">#innodb_buffer_pool_size =84G </span><br><span class="line">innodb_buffer_pool_size =90G</span><br><span class="line">innodb_buffer_pool_instances=8</span><br><span class="line">innodb_flush_method =O_DIRECT</span><br><span class="line">innodb_additional_mem_pool_size = 16M</span><br><span class="line">innodb_log_files_in_group = 3</span><br><span class="line">innodb_flush_log_at_trx_commit = 2</span><br><span class="line">innodb_lock_wait_timeout = 10</span><br><span class="line">innodb_sync_spin_loops = 40</span><br><span class="line">innodb_max_dirty_pages_pct = 90</span><br><span class="line">innodb_thread_concurrency = 0</span><br><span class="line">innodb_thread_sleep_delay = 500</span><br><span class="line">innodb_file_io_threads = 4</span><br><span class="line">innodb_concurrency_tickets = 1000</span><br><span class="line">log_bin_trust_function_creators = 1</span><br><span class="line"> </span><br><span class="line">innodb_io_capacity =2000</span><br><span class="line">#sync_binlog=0</span><br><span class="line">innodb_support_xa = 1</span><br><span class="line">innodb_log_file_size =1024M</span><br><span class="line">innodb_read_io_threads=16</span><br><span class="line">innodb_write_io_threads=16</span><br><span class="line">innodb_log_buffer_size =128M </span><br><span class="line">innodb_file_format = Barracuda</span><br><span class="line">innodb_purge_threads = 1</span><br><span class="line">innodb_purge_batch_size = 32</span><br><span class="line">innodb_old_blocks_pct = 75</span><br><span class="line">innodb_change_buffering = all</span><br><span class="line">transaction_isolation = READ-COMMITTED</span><br><span class="line"></span><br><span class="line">#symbolic-links=0 </span><br><span class="line">#log-queries-not-using-indexes </span><br><span class="line">#thread_cache_size=4 </span><br><span class="line">#query_cache_size=0</span><br><span class="line">#query_cache_type=0</span><br><span class="line">#join_buffer_size=512K </span><br><span class="line">#join_buffer_size=128M </span><br><span class="line">#read_buffer_size=128M </span><br><span class="line">#read_rnd_buffer_size=128M </span><br><span class="line">#key_buffer=128M </span><br><span class="line">#innodb_flush_log_at_trx_commit=0</span><br><span class="line">#bulk_insert_buffer_size = 512M</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#[mysqld_safe]</span><br><span class="line">#log-error=/var/log/mysqld.log</span><br><span class="line">#pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line">#open-files-limit= 28192</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
            <category> 配置文件 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Percona </tag>
            
            <tag> mysql </tag>
            
            <tag> mariadb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[进击的Linux--sed]]></title>
      <url>/2018/01/31/%E8%BF%9B%E5%87%BB%E7%9A%84Linux--sed/</url>
      <content type="html"><![CDATA[<p>#进击的Linux–sed<br><strong>查找目录下文件包含字段，并进行替换（IP）</strong><br><a id="more"></a>    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &quot;s/64.61/62.53/g&quot; `grep 64.61 -rl /opt/app/path`</span><br></pre></td></tr></table></figure>
<p><strong>查找目录下文件包含字段，并进行替换</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &apos;s/sttest/tibetair/g&apos; *****.xml</span><br></pre></td></tr></table></figure></p>
<p><strong>VIM中查找目录下文件包含字段，并进行替换（全部替换）</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s/sttest/tibetair/g</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 命令学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> shell </tag>
            
            <tag> Linux </tag>
            
            <tag> command </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[K8S搭建]]></title>
      <url>/2018/01/25/K8S%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h1 id="K8S搭建文档"><a href="#K8S搭建文档" class="headerlink" title="K8S搭建文档"></a>K8S搭建文档</h1><h2 id="硬件环境"><a href="#硬件环境" class="headerlink" title="硬件环境"></a>硬件环境</h2><p><strong><strong>三台centos7主机</strong></strong></p>
<p><strong><strong>两台做master(高可用)</strong></strong></p>
<p><strong><strong>1台做node</strong></strong></p>
<p><strong><strong>V1.6.3</strong></strong><br><a id="more"></a></p>
<h2 id="部署准备"><a href="#部署准备" class="headerlink" title="部署准备"></a>部署准备</h2><h3 id="Step-1-登录各个主机首先配置静态ip"><a href="#Step-1-登录各个主机首先配置静态ip" class="headerlink" title="Step 1   登录各个主机首先配置静态ip"></a>Step 1   登录各个主机首先配置静态ip</h3><h3 id="Step-2-关闭各个主机SELINUX-amp-amp-防火墙"><a href="#Step-2-关闭各个主机SELINUX-amp-amp-防火墙" class="headerlink" title="Step 2   关闭各个主机SELINUX&amp;&amp;防火墙"></a>Step 2   关闭各个主机SELINUX&amp;&amp;防火墙</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>
<h3 id="Step-3-设置各个主机hostname"><a href="#Step-3-设置各个主机hostname" class="headerlink" title="Step 3   设置各个主机hostname"></a>Step 3   设置各个主机hostname</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo 192-168-232-133.master  /etc/hostname</span><br><span class="line"></span><br><span class="line">echo &quot;127.0.0.1 192-168-232-133.master&quot;  /etc/hosts  </span><br><span class="line"></span><br><span class="line">sysctl kernel.hostname=192-168-232-133.master</span><br></pre></td></tr></table></figure>
<h3 id="Step-4-配置各个主机ip到dns的域名解析-需要配置所有集群中的主机"><a href="#Step-4-配置各个主机ip到dns的域名解析-需要配置所有集群中的主机" class="headerlink" title="Step 4   配置各个主机ip到dns的域名解析(需要配置所有集群中的主机)"></a>Step 4   配置各个主机ip到dns的域名解析(需要配置所有集群中的主机)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/hosts</span><br><span class="line">192.168.232.133 192-168-232-133.master</span><br></pre></td></tr></table></figure>
<h3 id="Step-5-启动各个主机network"><a href="#Step-5-启动各个主机network" class="headerlink" title="Step 5   启动各个主机network"></a>Step 5   启动各个主机network</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure>
<h3 id="Step-6-验证主机节点网络和域名解析和主机名"><a href="#Step-6-验证主机节点网络和域名解析和主机名" class="headerlink" title="Step 6   验证主机节点网络和域名解析和主机名"></a>Step 6   验证主机节点网络和域名解析和主机名</h3><h3 id="Step-7-安装工具"><a href="#Step-7-安装工具" class="headerlink" title="Step 7   安装工具"></a>Step 7   安装工具</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install vim lrzsz tmux -y</span><br></pre></td></tr></table></figure>
<h3 id="Step-8-安装docker（1-12-6）"><a href="#Step-8-安装docker（1-12-6）" class="headerlink" title="Step 8   安装docker（1.12.6）"></a>Step 8   安装docker（1.12.6）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-engine-selinux-1.12.6-1.el7.centos.noarch.rpm  </span><br><span class="line">yum install -y docker-engine-1.12.6-1.el7.centos.x86_64.rpm</span><br></pre></td></tr></table></figure>
<h3 id="Step-9-启动docker"><a href="#Step-9-启动docker" class="headerlink" title="Step 9  启动docker"></a>Step 9  启动docker</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>
<h2 id="部署K8S"><a href="#部署K8S" class="headerlink" title="部署K8S"></a>部署K8S</h2><h3 id="Step-10-导入k8s1-6-3-amp-calico所需镜像"><a href="#Step-10-导入k8s1-6-3-amp-calico所需镜像" class="headerlink" title="Step 10  导入k8s1.6.3&amp;calico所需镜像"></a>Step 10  导入k8s1.6.3&amp;calico所需镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker load -i  k8s1.6.3/k8s-1.6.3-images/dnsmasq.tar  </span><br><span class="line">docker load -i  k8s1.6.3/k8s-1.6.3-images/dns-nanny.tar  </span><br><span class="line">docker load -i  k8s1.6.3/k8s-1.6.3-images/dns.tar  </span><br><span class="line">docker load -i  k8s1.6.3/k8s-1.6.3-images/kube-apiserver.tar  </span><br><span class="line">docker load -i  k8s1.6.3/k8s-1.6.3-images/kube-controller-manager.tar  </span><br><span class="line">docker load -i  k8s1.6.3/k8s-1.6.3-images/kube-proxy.tar  </span><br><span class="line">docker load -i  k8s1.6.3/k8s-1.6.3-images/kube-scheduler.tar  </span><br><span class="line">docker load -i  k8s1.6.3/k8s-1.6.3-images/pause.tar  </span><br><span class="line">docker load -i  k8s1.6.3/k8s-1.6.3-images/sidecar.tar  </span><br><span class="line">docker load -i  k8s1.6.3/calico/cni.tar  </span><br><span class="line">docker load -i  k8s1.6.3/calico/node.tar  </span><br><span class="line">docker load -i  k8s1.6.3/calico/policy.tar</span><br></pre></td></tr></table></figure>
<h3 id="Step-11-安装kubeadm1-5-1-amp-kubelet-amp-kubectl（以上步骤每台都执行）"><a href="#Step-11-安装kubeadm1-5-1-amp-kubelet-amp-kubectl（以上步骤每台都执行）" class="headerlink" title="Step 11  安装kubeadm1.5.1&amp;kubelet&amp;kubectl（以上步骤每台都执行）"></a>Step 11  安装kubeadm1.5.1&amp;kubelet&amp;kubectl（以上步骤每台都执行）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum localinstall k8s1.6.3/centos/*.rpm -y</span><br></pre></td></tr></table></figure>
<h3 id="Step-12-安装etcd3-1-7-每台执行"><a href="#Step-12-安装etcd3-1-7-每台执行" class="headerlink" title="Step 12  安装etcd3.1.7(每台执行)"></a>Step 12  安装etcd3.1.7(每台执行)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">tar xvf etcd-v3.1.7-linux-amd64.tar  </span><br><span class="line">cd etcd-v3.1.7-linux-amd64  </span><br><span class="line">tmux</span><br><span class="line">`./etcd --name infra0 --initial-advertise-peer-urls http://192.168.10.127:2380 \</span><br><span class="line">      --listen-peer-urls http://192.168.10.127:2380 \</span><br><span class="line">      --listen-client-urls http://192.168.10.127:2379,http://127.0.0.1:2379 \</span><br><span class="line">      --advertise-client-urls http://192.168.10.127:2379 \</span><br><span class="line">      --initial-cluster-token etcd-cluster-1 \</span><br><span class="line">      --initial-cluster infra0=http://192.168.10.127:2380,infra1=http://192.168.10.130:2380,infra2=http://192.168.10.129:2380 \</span><br><span class="line">      --initial-cluster-state new</span><br><span class="line">`</span><br><span class="line"></span><br><span class="line"> `./etcd --name infra1 --initial-advertise-peer-urls http://192.168.10.130:2380 \</span><br><span class="line">      --listen-peer-urls http://192.168.10.130:2380 \</span><br><span class="line">      --listen-client-urls http://192.168.10.130:2379,http://127.0.0.1:2379 \</span><br><span class="line">      --advertise-client-urls http://192.168.10.130:2379 \</span><br><span class="line">      --initial-cluster-token etcd-cluster-1 \</span><br><span class="line">      --initial-cluster infra0=http://192.168.10.127:2380,infra1=http://192.168.10.130:2380,infra2=http://192.168.10.129:2380 \</span><br><span class="line">      --initial-cluster-state new</span><br><span class="line">`</span><br><span class="line"></span><br><span class="line">`./etcd --name infra2 --initial-advertise-peer-urls http://192.168.10.129:2380 \</span><br><span class="line">      --listen-peer-urls http://192.168.10.129:2380 \</span><br><span class="line">      --listen-client-urls http://192.168.10.129:2379,http://127.0.0.1:2379 \</span><br><span class="line">      --advertise-client-urls http://192.168.10.129:2379 \</span><br><span class="line">      --initial-cluster-token etcd-cluster-1 \</span><br><span class="line">      --initial-cluster infra0=http://192.168.10.127:2380,infra1=http://192.168.10.130:2380,infra2=http://192.168.10.129:2380 \</span><br><span class="line">      --initial-cluster-state new</span><br><span class="line">`</span><br></pre></td></tr></table></figure>
<h3 id="Step-13-修改kubelet配置文件（每台机器都修改）"><a href="#Step-13-修改kubelet配置文件（每台机器都修改）" class="headerlink" title="Step 13   修改kubelet配置文件（每台机器都修改）"></a>Step 13   修改kubelet配置文件（每台机器都修改）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/systemd/system/kubelet.service.d/10-kubeadm.conf</span><br></pre></td></tr></table></figure>
<p>把<code>KUBELET_CGROUP_ARGS=—cgroup-driver=systemd</code>改成<code>KUBELET_CGROUP_ARGS=—cgroup-driver=cgroupfs</code>  </p>
<h3 id="Step-14-重启kubelet-amp-amp-并加为系统自启动"><a href="#Step-14-重启kubelet-amp-amp-并加为系统自启动" class="headerlink" title="Step 14    重启kubelet&amp;&amp;并加为系统自启动"></a>Step 14    重启kubelet&amp;&amp;并加为系统自启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@hor1 k8s1.6.3]# service kubelet restart  </span><br><span class="line">[root@hor1 k8s1.6.3]# systemctl daemon-reload  </span><br><span class="line">[root@hor1 k8s1.6.3]# systemctl enable kubelet  </span><br><span class="line">[root@hor1 k8s1.6.3]# systemctl enable docker</span><br></pre></td></tr></table></figure>
<h3 id="Step-15-修改Bridge-重启后失效-每台机器执行-，可加入到-etc-rc-d-rc-local"><a href="#Step-15-修改Bridge-重启后失效-每台机器执行-，可加入到-etc-rc-d-rc-local" class="headerlink" title="Step 15  修改Bridge(重启后失效,每台机器执行)，可加入到/etc/rc.d/rc.local"></a>Step 15  修改Bridge(重启后失效,每台机器执行)，可加入到/etc/rc.d/rc.local</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo 1  /proc/sys/net/bridge/bridge-nf-call-iptables   </span><br><span class="line">echo 1  /proc/sys/net/bridge/bridge-nf-call-ip6tables</span><br></pre></td></tr></table></figure>
<h3 id="Step-16-初始化主节点"><a href="#Step-16-初始化主节点" class="headerlink" title="Step 16  初始化主节点"></a>Step 16  初始化主节点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[root@hor1 k8s1.6.3]# kubeadm init --config kubeadm.config   </span><br><span class="line">[kubeadm] WARNING: kubeadm is in beta, please do not use it for production clusters.  </span><br><span class="line">[init] Using Kubernetes version: v1.6.3</span><br><span class="line">[init] Using Authorization mode: RBAC</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">[preflight] Starting the kubelet service</span><br><span class="line">[certificates] Generated CA certificate and key.</span><br><span class="line">[certificates] Generated API server certificate and key.</span><br><span class="line">[certificates] API Server serving cert is signed for DNS names [192-168-10-127.master   kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.10.127]  </span><br><span class="line">[certificates] Generated API server kubelet client certificate and key.  </span><br><span class="line">[certificates] Generated service account token signing key and public key.  </span><br><span class="line">[certificates] Generated front-proxy CA certificate and key.  </span><br><span class="line">[certificates] Generated front-proxy client certificate and key.    </span><br><span class="line">[certificates] Valid certificates and keys now exist in &quot;/etc/kubernetes/pki&quot;   </span><br><span class="line">[kubeconfig] Wrote KubeConfig file to disk: &quot;/etc/kubernetes/admin.conf&quot;  </span><br><span class="line">[kubeconfig] Wrote KubeConfig file to disk: &quot;/etc/kubernetes/kubelet.conf&quot;</span><br><span class="line">[kubeconfig] Wrote KubeConfig file to disk: &quot;/etc/kubernetes/controller-manager.conf&quot;  </span><br><span class="line">[kubeconfig] Wrote KubeConfig file to disk: &quot;/etc/kubernetes/scheduler.conf&quot;  </span><br><span class="line">[apiclient] Created API client, waiting for the control plane to become ready  </span><br><span class="line">[apiclient] All control plane components are healthy after 17.544851 seconds  </span><br><span class="line">[apiclient] Waiting for at least one node to register  </span><br><span class="line">[apiclient] First node has registered after 4.004183 seconds  </span><br><span class="line">[token] Using token: 3f877e.e592d381fbbbe358  </span><br><span class="line">[apiconfig] Created RBAC rules  </span><br><span class="line">[addons] Created essential addon: kube-proxy  </span><br><span class="line">[addons] Created essential addon: kube-dns  </span><br><span class="line">  </span><br><span class="line">Your Kubernetes master has initialized successfully!  </span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run (as a regular user):  </span><br><span class="line">  </span><br><span class="line">  sudo cp /etc/kubernetes/admin.conf $HOME/  </span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME/admin.conf  </span><br><span class="line">  export KUBECONFIG=$HOME/admin.conf  </span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:  </span><br><span class="line">  http://kubernetes.io/docs/admin/addons/  </span><br><span class="line"></span><br><span class="line">You can now join any number of machines by running the following on each node  </span><br><span class="line">as root:  </span><br><span class="line"></span><br><span class="line">  kubeadm join --token 3f877e.e592d381fbbbe358 192.168.10.127:8080</span><br></pre></td></tr></table></figure>
<h3 id="Step-17-主机点可用"><a href="#Step-17-主机点可用" class="headerlink" title="Step 17   主机点可用"></a>Step 17   主机点可用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/kubernetes/admin.conf $HOME/  </span><br><span class="line"> sudo chown $(id -u):$(id -g) $HOME/admin.conf  </span><br><span class="line"> export KUBECONFIG=$HOME/admin.conf</span><br></pre></td></tr></table></figure>
<h3 id="Step-18-加入Calico网络"><a href="#Step-18-加入Calico网络" class="headerlink" title="Step 18    加入Calico网络"></a>Step 18    加入Calico网络</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f beijing-calico.yml</span><br></pre></td></tr></table></figure>
<h3 id="Step-19-查看各组件各pod的状态"><a href="#Step-19-查看各组件各pod的状态" class="headerlink" title="Step 19   查看各组件各pod的状态"></a>Step 19   查看各组件各pod的状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods --all-namespaces</span><br></pre></td></tr></table></figure>
<h3 id="Step-20-加入子节点"><a href="#Step-20-加入子节点" class="headerlink" title="Step 20 加入子节点"></a>Step 20 加入子节点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join --token 3f877e.e592d381fbbbe358 192.168.10.127:8080</span><br></pre></td></tr></table></figure>
<h3 id="Step-21-验证dns无误"><a href="#Step-21-验证dns无误" class="headerlink" title="Step 21    验证dns无误"></a>Step 21    验证dns无误</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f busybox.yml  </span><br><span class="line">kubectl exec -it busybox -- nslookup kubernetes.default</span><br></pre></td></tr></table></figure>
<p>主节点搭建完成，一个主节点，两个子节点</p>
<h2 id="6-12-2017-4-57-18-PM"><a href="#6-12-2017-4-57-18-PM" class="headerlink" title="6/12/2017 4:57:18 PM "></a>6/12/2017 4:57:18 PM </h2><h2 id="高可用节点搭建（1-6未实践，参考1-5）"><a href="#高可用节点搭建（1-6未实践，参考1-5）" class="headerlink" title="高可用节点搭建（1.6未实践，参考1.5）"></a>高可用节点搭建（1.6未实践，参考1.5）</h2>]]></content>
      
        <categories>
            
            <category> 容器 </category>
            
            <category> kubernates </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
            <tag> kubernates </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2018计划]]></title>
      <url>/2018/01/24/2018%E8%AE%A1%E5%88%92/</url>
      <content type="html"><![CDATA[<p>新年计划<br><a id="more"></a></p>
<p>#1,减肥，一定要瘦下来</p>
<p>#2,全栈工程师,把开发捡起来，python+Go</p>
<p>#3.找到一份适合自己的工作</p>
]]></content>
      
        <categories>
            
            <category> 其他 </category>
            
            <category> 学习计划 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> python </tag>
            
            <tag> Learning </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[关于]]></title>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<p>大家好，我是艾伦吴。欢迎来到我的个人技术博客。</p>
<p>现就职于沈阳本地的一家航空领域的企业，作为一名运维工程师，始终把DevOps作为努力的目标，希望以后可以慢慢的把开发做的更好，本人喜欢研究各种新奇的东西，流连于各大开源网站，革命尚未成功，同志任需努力。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[读书]]></title>
      <url>/reading/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[categories]]></title>
      <url>/categories/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
